<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chenzhihui.community.mapper.MessageMapper">

    <resultMap type="com.chenzhihui.community.entity.Message" id="MessageMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="fromId" column="from_id" jdbcType="INTEGER"/>
        <result property="toId" column="to_id" jdbcType="INTEGER"/>
        <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>


    <!-- 批量插入 -->
    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into community.message(from_id, to_id, conversation_id, content, status, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.fromId}, #{entity.toId}, #{entity.conversationId}, #{entity.content}, #{entity.status}, #{entity.createTime})
        </foreach>
    </insert>
    <!-- 批量插入或按主键更新 -->
    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into community.message(from_id, to_id, conversation_id, content, status, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.fromId}, #{entity.toId}, #{entity.conversationId}, #{entity.content}, #{entity.status}, #{entity.createTime})
        </foreach>
        on duplicate key update
         from_id = values(from_id) , to_id = values(to_id) , conversation_id = values(conversation_id) , content = values(content) , status = values(status) , create_time = values(create_time)     </insert>


    <select id="selectConversationCount" resultType="int" parameterType="int">
        select count(m.maxid) from (
                                       select max(id) as maxid from message
                                       where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
                                       group by conversation_id
                                   ) as m
    </select>

    <select id="selectLetterCount" resultType="int" parameterType="String">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId!=null">
            and conversation_id = #{conversationId}
        </if>
    </select>
    <select id="selectLatestNotice" resultType="com.chenzhihui.community.entity.Message">
        select
        <include refid="selectFields"></include>
        from message
        where id in (
        select max(id) from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        )
    </select>

    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status != 2
        and from_id = 1
        and to_id = #{userId}
          and conversation_id = #{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="java.lang.Integer">
        select count(id) from message
        where status = 0
        and from_id = 1
        and to_id = #{userId}
        <if test="topic!null">
            and conversation_id = #{topic}
        </if>
    </select>

    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <update id="updateStatus" >
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
</mapper>

